# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Googletest installer
      uses: MarkusJx/googletest-installer@v1.1.1
      with:
        # A path to the CC compiler
        CC_path: # optional, default is 
        # A path to the CXX compiler
        CXX_path: # optional, default is 
        # C flags to pass to the C compiler
        C_FLAGS: # optional, default is 
        # C++ flags to pass to the C++ compiler
        CXX_FLAGS: # optional, default is 
              
    - name: Download and install Boost
      uses: MarkusJx/install-boost@v2.5.1
      with:
        # The boost version to install, e.g. "1.73.0"
        boost_version: 1.89.0
        # The toolset used to compile boost, e.g. "msvc"
        toolset: gcc # optional, default is 
        # The platform version boost was compiled on, e.g. "18.04"
        platform_version:  # optional, default is 
        # Whether the boost libraries are linked statically or dynamically
        link: # optional, default is 
        # The architecture the binaries were built for
        arch: # optional, default is x86
        # The dirctory to install boost into
        boost_install_dir: # optional, default is 
        # Wheter to use actions/cache to improve build times
        cache: # optional, default is true

    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

